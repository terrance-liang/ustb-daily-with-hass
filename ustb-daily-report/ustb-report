#!/bin/bash
#
# Copyright 2020 Vincente <vincenteliang@foxmail.com>
# Copyright 2020-2021 Jason <jason23347@163.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# rcv cmd args from cli
INPUT_CMD=$1
USER_NAME=$2
USER_LOC=$3

# 1 to turn on debug mode, redirect log stream to stderr
DEBUG=0
# Randomly delay report submission for 0-${MAX_DELAY_REPORT} minutes
MAX_DELAY_REPORT=30
MAX_DELAY_PING=5
MAX_RETRY=5

# host
REPORT_HOST=https://isport.ustb.edu.cn

# path settings
APP_ROOT="/volume1/docker/hass/ustb-daily-report/"
WWW_DIR="/volume1/mount/home/www/ustb-log"

# customized data
DATA_ROOT="$APP_ROOT/data"
USER_DATA_ROOT="$DATA_ROOT/$USER_NAME/"
REPORT_COOKIE="$(cat $USER_DATA_ROOT/$USER_LOC/REPORT-COOKIE)"
REPORT_DATA="$(cat $USER_DATA_ROOT/$USER_LOC/REPORT-DATA)"
REPORT_UA="$(cat $USER_DATA_ROOT/$USER_LOC/REPORT-UA)"

LOG_DIR="$USER_DATA_ROOT/log"
LOG_FILE="$LOG_DIR/$USER_NAME.log"
PING_RET="$LOG_DIR/$USER_NAME.ping"
REPORT_RET="$LOG_DIR/$USER_NAME.report"
IYUU_TOKEN=$(test -f $USER_DATA_ROOT/IYUU && cat $USER_DATA_ROOT/IYUU)


if [ $DEBUG -eq 0 ]; then
        RETRY_FREQUENCY=20 # seconds
        RANDOM_DELAY=1
else
        RETRY_FREQUENCY=2
        RANDOM_DELAY=0
fi

iyuu_send_message() {
        [[ -n "$IYUU_TOKEN" ]] && curl -k https://iyuu.cn/$IYUU_TOKEN.send?text="$1" >/dev/null
}

send_alert() {
        iyuu_send_message "USTB DAILY REPORT ERROR, check log for details."
}

write_log() {
        printf "[%s][%s] %s\n" "$(date +"%Y-%m-%d %H:%M:%S")" "$INPUT_CMD $USER_NAME $USER_LOC" "$1" | tee -a $LOG_FILE
        rsync -az $LOG_FILE $WWW_DIR/ >/dev/null 2>&1
        return 0
}

report() {
        curl -k -L \
                -X POST "$REPORT_HOST/app.RSPWxClient/index.jsp"  \
                -H "Host: isport.ustb.edu.cn"  \
                -H "Accept: */*"  \
                -H "Connection: keep-alive"  \
                -H "X-Requested-With: XMLHttpRequest"  \
                -H "User-Agent: $REPORT_UA"  \
                -H "Content-Type: application/x-www-form-urlencoded; charset=UTF-8"  \
                -H "Origin: $REPORT_HOST"  \
                -H "Referer: $REPORT_HOST/app.RSPWxClient/index.jsp?m=yqinfo&c=index&a=init"  \
                -H "Accept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7"  \
                -H "Cookie: $REPORT_COOKIE" \
                --data "$REPORT_DATA"  \
                --compressed \
                -o $REPORT_RET
        
        # deal with return, known situation, 0/1=success, 2=expired, 3=server down
        grep 'Submission succeed' $REPORT_RET >/dev/null && return 0
        grep 'You have submitted today' $REPORT_RET >/dev/null && return 1
        grep 'succeed_m' $REPORT_RET >/dev/null && return 2
        grep 'The remote host or network may be down.' $REPORT_RET >/dev/null && return 3

        # deal with unknown situation
        REPORT_ERR_LOG=$REPORT_RET.FAILED.$(date +"%Y-%m-%d-%H-%M-%S")
        cp $REPORT_RET $REPORT_ERR_LOG
        write_log "Unknown error with return $REPORT_ERR_LOG"
        return -1
}

ping(){
        # get return
        curl -skL \
        -X GET "$REPORT_HOST/app.RSPWxClient/index.jsp?m=yqinfo&c=index&a=init" \
        -H "User-Agent: $REPORT_UA"  \
        -H "Cookie: $REPORT_COOKIE" \
        -H "X-Requested-With: XMLHttpRequest" \
        -o $PING_RET

        # deal with return, known situation, 0=success, 1=expired, 2=server down
        grep 'drtw' $PING_RET >/dev/null && return 0
        grep '!isWeixin' $PING_RET >/dev/null && return 1
        grep 'succeed_m' $REPORT_RET >/dev/null && return 1
        grep 'The remote host or network may be down.' $REPORT_RET >/dev/null && return 2

        # deal with unknown situation
        PING_ERR_LOG=$PING_RET.FAILED.$(date +"%Y-%m-%d-%H-%M-%S")
        cp $PING_RET $PING_ERR_LOG
        write_log "Unknown error with return $PING_ERR_LOG"
        return -1
}

case $INPUT_CMD in
report)
        if [ ${RANDOM_DELAY:-0} -eq 1 ]; then
                rnd=$((RANDOM % $MAX_DELAY_REPORT))
                delay=$(($rnd * 60))
                write_log "Random delay for $rnd minutes."
                sleep $delay
        fi
        declare -i n=0
        while [ $n -lt $MAX_RETRY ]; do
                report
                [ $? -eq 0 ] && write_log "Succeed." && iyuu_send_message "Dailay Report Succeed." && break
                [ $? -eq 1 ] && write_log "Redundant Report." && break
                [ $? -eq 2 ] && write_log "Seession Expired." && ((n+=1))
                [ $? -eq 3 ] && write_log "USTB Server Down." && ((n+=1))
                [ $? -eq -1 ] && write_log "Unknown Error." && ((n+=1))
                # send alert after maximun retry
                [ $n -ge $MAX_RETRY ] && send_alert && exit 1
                write_log "Retrying in ${RETRY_FREQUENCY}(s)."
                sleep $RETRY_FREQUENCY
        done
        ;;
ping)
        declare -i n=0
        if [ ${RANDOM_DELAY:-0} -eq 1 ]; then
                rnd=$((RANDOM % $MAX_DELAY_PING))
                delay=$(($rnd * 60))
                write_log "Random delay for $rnd minutes."
                sleep $delay
        fi
        while [ $n -lt $MAX_RETRY ]; do
                ping
                [ $? -eq 0 ] && write_log "Succeed." && break
                [ $? -eq 1 ] && write_log "Seession Expired." && ((n+=1))
                [ $? -eq 2 ] && write_log "USTB Server Down." && ((n+=1))
                [ $? -eq -1 ] && write_log "Unknown Error." && ((n+=1))
                # send alert after maximun retry
                [ $n -ge $MAX_RETRY ] && send_alert && exit 1
                write_log "Retrying in ${RETRY_FREQUENCY}(s)."
                sleep $RETRY_FREQUENCY
        done
        ;;
test)
        report
        [ $? -lt 2 ] && write_log "test passed." && exit 0
        write_log "test failed." && exit -1
        ;;
dev)
        send_alert
        ;;
esac
